https://practice.geeksforgeeks.org/problems/shortest-common-supersequence0322/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

Input:
X = abcd, Y = xycd
Output: 6
Explanation: Shortest Common Supersequence
would be abxycd which is of length 6 and
has both the strings as its subsequences.


1. Find length of common elements [Logic based on longest common subsequence]
2. Subtract from original length

   public static int shortestCommonSupersequence(String X,String Y,int m,int n)
    {
        //Your code here
        // we have to find non common string and add 
        // abcde and xycd // xye
        
        // abcdxye
        // common charater between them
        // abcdexycd => 9
        // xye
        
        // we have to count which character are not matching
        // we have to find matching character  and decreas from length;
        //int len = m
         int[][] dp = new int[m+1][n+1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <=n; j++) {
                if(i==0 || j==0)
                {
                 dp[i][j] = 0;
                }
                else if (X.charAt(i-1) == Y.charAt(j-1)) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
                 //System.out.println("length "+dp[i][j]);

            }

        }
        int lenOfLCS = dp[m][n];
        return m+n - lenOfLCS;
        
    }
